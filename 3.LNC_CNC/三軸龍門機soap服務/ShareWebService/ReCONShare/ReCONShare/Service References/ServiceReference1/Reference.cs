//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.42000
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReCONShare.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Class_ReCONSync_Service", Namespace="http://schemas.datacontract.org/2004/07/ReconWcfServiceLibrary2")]
    [System.SerializableAttribute()]
    public partial class Class_ReCONSync_Service : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConnectIndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RegisterCommandTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegisterDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegisterNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegisterNoteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RegisterValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectIndex {
            get {
                return this.ConnectIndexField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectIndexField, value) != true)) {
                    this.ConnectIndexField = value;
                    this.RaisePropertyChanged("ConnectIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RegisterCommandType {
            get {
                return this.RegisterCommandTypeField;
            }
            set {
                if ((this.RegisterCommandTypeField.Equals(value) != true)) {
                    this.RegisterCommandTypeField = value;
                    this.RaisePropertyChanged("RegisterCommandType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RegisterData {
            get {
                return this.RegisterDataField;
            }
            set {
                if ((object.ReferenceEquals(this.RegisterDataField, value) != true)) {
                    this.RegisterDataField = value;
                    this.RaisePropertyChanged("RegisterData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RegisterName {
            get {
                return this.RegisterNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RegisterNameField, value) != true)) {
                    this.RegisterNameField = value;
                    this.RaisePropertyChanged("RegisterName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RegisterNote {
            get {
                return this.RegisterNoteField;
            }
            set {
                if ((object.ReferenceEquals(this.RegisterNoteField, value) != true)) {
                    this.RegisterNoteField = value;
                    this.RaisePropertyChanged("RegisterNote");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RegisterValue {
            get {
                return this.RegisterValueField;
            }
            set {
                if ((object.ReferenceEquals(this.RegisterValueField, value) != true)) {
                    this.RegisterValueField = value;
                    this.RaisePropertyChanged("RegisterValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IReconWcfService")]
    public interface IReconWcfService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReconWcfService/ReconServiceStatus", ReplyAction="http://tempuri.org/IReconWcfService/ReconServiceStatusResponse")]
        bool ReconServiceStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReconWcfService/DetectControllerIP", ReplyAction="http://tempuri.org/IReconWcfService/DetectControllerIPResponse")]
        string[] DetectControllerIP();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReconWcfService/ConnectToServer", ReplyAction="http://tempuri.org/IReconWcfService/ConnectToServerResponse")]
        void ConnectToServer(string ipaddr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReconWcfService/CloseConnectToServer", ReplyAction="http://tempuri.org/IReconWcfService/CloseConnectToServerResponse")]
        void CloseConnectToServer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReconWcfService/SyncCompare", ReplyAction="http://tempuri.org/IReconWcfService/SyncCompareResponse")]
        bool SyncCompare(Class_ReCONSync_Service[] SyncList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReconWcfService/SetReCONPolling", ReplyAction="http://tempuri.org/IReconWcfService/SetReCONPollingResponse")]
        void SetReCONPolling(Class_ReCONSync_Service[] SyncList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReconWcfService/GetPollingData", ReplyAction="http://tempuri.org/IReconWcfService/GetPollingDataResponse")]
        Class_ReCONSync_Service[] GetPollingData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReconWcfService/Write_R_Bit", ReplyAction="http://tempuri.org/IReconWcfService/Write_R_BitResponse")]
        bool Write_R_Bit(string ServerIndex, string R_Value_address, string ElecValue, string Trigger);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReconWcfService/Write_R_Value", ReplyAction="http://tempuri.org/IReconWcfService/Write_R_ValueResponse")]
        bool Write_R_Value(string ServerIndex, string R_Value_address, string Data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReconWcfServiceChannel : IReconWcfService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReconWcfServiceClient : System.ServiceModel.ClientBase<IReconWcfService>, IReconWcfService {
        
        public ReconWcfServiceClient() {
        }
        
        public ReconWcfServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReconWcfServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReconWcfServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReconWcfServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool ReconServiceStatus() {
            return base.Channel.ReconServiceStatus();
        }
        
        public string[] DetectControllerIP() {
            return base.Channel.DetectControllerIP();
        }
        
        public void ConnectToServer(string ipaddr) {
            base.Channel.ConnectToServer(ipaddr);
        }
        
        public void CloseConnectToServer() {
            base.Channel.CloseConnectToServer();
        }
        
        public bool SyncCompare(Class_ReCONSync_Service[] SyncList) {
            return base.Channel.SyncCompare(SyncList);
        }
        
        public void SetReCONPolling(Class_ReCONSync_Service[] SyncList) {
            base.Channel.SetReCONPolling(SyncList);
        }
        
        public Class_ReCONSync_Service[] GetPollingData() {
            return base.Channel.GetPollingData();
        }
        
        public bool Write_R_Bit(string ServerIndex, string R_Value_address, string ElecValue, string Trigger) {
            return base.Channel.Write_R_Bit(ServerIndex, R_Value_address, ElecValue, Trigger);
        }
        
        public bool Write_R_Value(string ServerIndex, string R_Value_address, string Data) {
            return base.Channel.Write_R_Value(ServerIndex, R_Value_address, Data);
        }
    }
}
